name: ie-bank-infra
on:
  workflow_dispatch:  # This allows manual triggering
  push:
    branches:
      - '*'  # This will run on any branch
    paths:
      - 'infra/**'
      - '!infra/scripts/**'
  pull_request:
    branches:
      - main  # This will run on pull requests to main
    paths:
      - 'infra/**'
      - '!infra/scripts/**'

env:
  RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-B-DEV
  RESOURCE_GROUP_UAT: BCSAI2024-DEVOPS-STUDENTS-B-UAT
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  USER_ALIAS: dkumlin
  DOCKER_REGISTRY_SERVER_URL: dkumlinacrdev.azurecr.io
  IMAGE_NAME: dkumlinacrdev.azurecr.io/dkumlin-be-dev:latest
  BACKEND_WEBAPP_DEV: dkumlin-be-dev


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
        image-version: ${{ steps.image-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Run Bicep linter
        run: az bicep build --file ./infra/main.bicep
      - name: Set image version
        id: image-version
        run: |
          echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT
      - name: "Build and push image"
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: Development

    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: "Deploy to Azure Web App - Dev"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: "${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-version }}"
      - name: Debug
        run: |
          echo "ENV: ${{ vars.ENV }}"
          echo "DBHOST: ${{ vars.DBHOST }}"
          echo "DBNAME: ${{ vars.DBNAME }}"
          echo "FLASK_APP: ${{ vars.FLASK_APP }}"
          echo "FLASK_DEBUG: ${{ vars.FLASK_DEBUG }}"
      - name: Deploy to Development
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./infra/main.bicep
          parameters: >
            ./infra/parameters/dev.parameters.json 
            appServiceAPIEnvVarENV=${{ vars.ENV }} 
            appServiceAPIEnvVarDBHOST=${{ vars.DBHOST }} 
            appServiceAPIEnvVarDBNAME=${{ vars.DBNAME }} 
            appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} 
            appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} 
            appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} 
            appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
          deploymentName: ${{ env.USER_ALIAS }}-dev

  deploy-uat:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.ref == 'refs/heads/main'
    environment: UAT

    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Debug
        run: |
          echo "ENV: ${{ vars.ENV }}"
          echo "DBHOST: ${{ vars.DBHOST }}"
          echo "DBNAME: ${{ vars.DBNAME }}"
          echo "FLASK_APP: ${{ vars.FLASK_APP }}"
          echo "FLASK_DEBUG: ${{ vars.FLASK_DEBUG }}"
      - name: Deploy to UAT
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
          template: ./infra/main.bicep
          parameters: >
            ./infra/parameters/uat.parameters.json 
            appServiceAPIEnvVarENV=${{ vars.ENV}} 
            appServiceAPIEnvVarDBHOST=${{ vars.DBHOST }} 
            appServiceAPIEnvVarDBNAME=${{ vars.DBNAME }} 
            appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} 
            appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} 
            appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} 
            appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
          deploymentName: ${{ env.USER_ALIAS }}-uat
